# Jacob Prosser 
rm(list=ls())

# Packages 
library(LaplacesDemon)
library(bbmle)

# Calculating the likelihood of a regression line by MLE fit ----------------------
# Fake dataset 
m <- 3
x <- seq(1, 10)
c <- 1

# Function to predict y values based on slope, intercept and x-values 
reg <- function(m, x, c){
  y = m*x + c 
}

# Observed y-values
y.obs <- c(2, 5, 10, 12, 17, 20, 19, 21, 29, 33) # Observed y-values (arbitrary)

# Predicted y-values
y.pred <- reg(m, x, c)

# Finding the slope and intercept of the predicted y-values
summary(lm(y.pred~x))[4]

# Plot of the x values with the obsevered values
plot(x, y.obs)
abline(summary(lm(y.pred~x))[4], col="red")


# Caclulating the likiehood of the line 
ylikelihood.vec<- dnorm(y.obs, y.pred, sd=1)

# Likelihood of the line 
prod(-log(ylikelihood.vec))  # Still confused on how to present the likeihood. Log the vector and sum?


# From the output above, the likelihood of the regression (indicated by the abine line in red on the plot) 
# would be 9.433063e-13. 


# Now fitting the regression using the MLE2 function -------------------
library(bbmle)

# Populate a dataset 
n=100
x1 = rnorm(100, 7, 2)
y1 = rnorm(length(x1), 2*x1 +1, 1)
plot(x1, y1)

model1 <- lm(y1~ x1)
summary(model1)

# Objective function/ negative log calculators 
linregfit <- function(a, b, sigma){
  
  Ypred= a + b*x1
  
  -sum(dnorm(y1, mean=Ypred, sd=sigma, log=T))
}


# MLE2 Functiont that will run and omptimize different values
# The following video was used as a guide: 
# https://www.youtube.com/watch?v=Lmk3iCuQ8SY&t=289s

mle2.model <- mle2(linregfit, start=list(a=14, b=0, sigma=1))

summary(mle2.model)
-logLik(mle2.model)
deviance(mle2.model)
AIC(mle2.model)
AIC(model1)


# Fitting the data from my inital single MLE fit (line 4) -------------------------------------

regression.fit.2 <- function(m, b, sigma2){
  
  y.prediction=m*x+b
  
  -sum(dnorm(y.obs, mean=y.pred, sd=sigma2, log=T ))
}

mle2.model2 <- mle2(regression.fit.2, start = list(m=3, b=0, sigma2=1))

summary(mle2.model2)
AIC(mle2.model2)
coef(mle2.model2)



## Fitting a Laplace distribution
x <- seq(-10,10,1)
Laplace = function(a){
  k = exp(-a*abs(x))
}

library(LaplacesDemon)
# dlaplace(x, log=F) Very simular to what the above function is doing 
# plot(x, k)
 plot(x, palaplace(x))

plot(x, Laplace(.5), typ = "l")  # the 0.5 controls the a variable (k = exp(-a*abs(x)))

# create some fake data - this is not a good method to create fake
# data, I was just in a bit of a hurry
data <- Laplace(.5)*runif(length(x)) #runif right now is bounded between 0 and 1
y.obs <- data
points(x,data)

negLL = function(a, sigma){
  -sum(dnorm(y.obs, mean=Laplace(a), sd=sigma, log=T ))
}

mle.Laplace.Ex <- mle2(negLL, start=list(a=1, sigma=1))

a.est = unname(coef(mle.Laplace.Ex)[1]) 

lines(x, Laplace(a.est), col = "red")
